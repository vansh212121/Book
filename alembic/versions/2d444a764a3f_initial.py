"""Initial

Revision ID: 2d444a764a3f
Revises: 
Create Date: 2025-08-09 22:31:55.650790

"""
from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2d444a764a3f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(length=25), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(length=25), nullable=False),
    sa.Column('role', sa.Enum('USER', 'MODERATOR', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=200), nullable=False),
    sa.Column('username', sa.String(length=25), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tokens_valid_from_utc', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('books',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('author', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('publisher', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('page_count', sa.Integer(), nullable=False),
    sa.Column('published_date', sa.Date(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title', 'author', name='uq_book_title_author')
    )
    op.create_index('idx_book_author', 'books', ['author'], unique=False)
    op.create_index('idx_book_published_date', 'books', ['published_date'], unique=False)
    op.create_index('idx_book_user_id', 'books', ['user_id'], unique=False)
    op.create_table('tags',
    sa.Column('display_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('category', sa.Enum('GENRE', 'TOPIC', 'AUDIENCE', 'FORMAT', 'LANGUAGE', 'OTHER', name='tagcategory'), nullable=False),
    sa.Column('is_official', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_tag_name')
    )
    op.create_index('idx_tag_category', 'tags', ['category'], unique=False)
    op.create_index('idx_tag_name', 'tags', ['name'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_table('book_tags',
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('book_id', 'tag_id'),
    sa.UniqueConstraint('book_id', 'tag_id', name='uq_book_tag')
    )
    op.create_index('idx_book_tag_book_id', 'book_tags', ['book_id'], unique=False)
    op.create_index('idx_book_tag_created_at', 'book_tags', ['created_at'], unique=False)
    op.create_index('idx_book_tag_tag_id', 'book_tags', ['tag_id'], unique=False)
    op.create_table('reviews',
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('is_spoiler', sa.Boolean(), nullable=False),
    sa.Column('is_verified_purchase', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('review_text', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('helpful_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('unhelpful_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('helpful_count >= 0', name='ck_review_helpful_positive'),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='ck_review_rating'),
    sa.CheckConstraint('unhelpful_count >= 0', name='ck_review_unhelpful_positive'),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'book_id', name='uq_user_book_review')
    )
    op.create_index('idx_review_book_id', 'reviews', ['book_id'], unique=False)
    op.create_index('idx_review_created_at', 'reviews', ['created_at'], unique=False)
    op.create_index('idx_review_helpful', 'reviews', ['helpful_count'], unique=False)
    op.create_index('idx_review_rating', 'reviews', ['rating'], unique=False)
    op.create_index('idx_review_user_id', 'reviews', ['user_id'], unique=False)
    op.create_table('review_votes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('review_id', sa.Integer(), nullable=False),
    sa.Column('is_helpful', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'review_id'),
    sa.UniqueConstraint('user_id', 'review_id', name='uq_user_review_vote')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('review_votes')
    op.drop_index('idx_review_user_id', table_name='reviews')
    op.drop_index('idx_review_rating', table_name='reviews')
    op.drop_index('idx_review_helpful', table_name='reviews')
    op.drop_index('idx_review_created_at', table_name='reviews')
    op.drop_index('idx_review_book_id', table_name='reviews')
    op.drop_table('reviews')
    op.drop_index('idx_book_tag_tag_id', table_name='book_tags')
    op.drop_index('idx_book_tag_created_at', table_name='book_tags')
    op.drop_index('idx_book_tag_book_id', table_name='book_tags')
    op.drop_table('book_tags')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index('idx_tag_name', table_name='tags')
    op.drop_index('idx_tag_category', table_name='tags')
    op.drop_table('tags')
    op.drop_index('idx_book_user_id', table_name='books')
    op.drop_index('idx_book_published_date', table_name='books')
    op.drop_index('idx_book_author', table_name='books')
    op.drop_table('books')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
